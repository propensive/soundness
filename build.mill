package build

import mill._
import mill.api.Result
import scalalib._
import publish._
import os.Path

object settings {
  val scalaVersion = "3.6.1"
  //val scalaVersion = "3.7.0-RC1-bin-20250309-2f639e2-NIGHTLY"
  val scalaOptions = Seq(
    "-experimental",
    "-new-syntax",
    "-feature",
    //"-explain",
    "-deprecation",
    //"-Wunused:imports",
    "-Wimplausible-patterns",
    "-Wsafe-init",
    "-Xmax-inlines", "100",
    "-Ycc-new",
    "-Yno-flexible-types",
    "-Yexplicit-nulls",
    "-Ycheck-all-patmat",
    "-explain-cyclic",
    "-language:experimental.modularity",
    "-language:experimental.genericNumberLiterals",
    "-language:experimental.into",
    "-language:experimental.erasedDefinitions",
    "-language:experimental.saferExceptions",
    "-language:experimental.namedTypeArguments",
    "-language:implicitConversions"
  )
}

trait BaseScalaModule extends ScalaModule {
  override def scalaVersion = settings.scalaVersion
  override def scalacOptions = settings.scalaOptions
  def consoleScalacOptions = scalacOptions()

  def publishVersion = T {
    val lastTagged = os.proc("git", "rev-list", "--tags", "--max-count", "1").call().out.text().trim
    os.proc("git", "describe", "--tags", lastTagged).call().out.text().trim
  }

  def artifactSuffix = T("")
  def pomSettings = T(PomSettings(
    description = "soundness-all",
    organization = "dev.soundness",
    url = "https://soundness.dev/",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github("propensive", "soundness"),
    developers = Seq(Developer("propensive", "Jon Pretty", "https://github.com/propensive"))
  ))
}

trait SoundnessModule extends Module {
  def millSourcePath = super.millSourcePath / ".." / "lib" / super.millSourcePath.last / "src"
}

trait SoundnessSubModule extends BaseScalaModule with PublishModule {
  def resources = Task {
    Seq(PathRef(millSourcePath / ".." / ".." / "res"))
  }
  def sources = Task.Sources {
    Seq(PathRef(millSourcePath))
  }
}

trait ProbablyTestModule extends BaseScalaModule {
  def finalMainClass = (millSourcePath / ".." / "..").last + ".Tests"
  def moduleDeps: Seq[ScalaModule] = Seq(probably.cli)
  def resources = Task {
    Seq(PathRef(millSourcePath / ".." / ".." / "res"))
  }

  def sources = Task.Sources {
    Seq(PathRef(millSourcePath))
  }

  def compile = Task {
    larceny.plugin.assembly()
    super.compile()
  }

  def scalacOptions = settings.scalaOptions ++ Seq(
    "-Xplugin",
    (larceny.plugin.assembly().path).toString()
  )
}

trait RecursivePublishModule { self: BaseScalaModule =>
  def publishLocal(localIvyRepo: String = null): Command[Unit] = Task.Command {
    T.traverse(
      this.moduleDeps.flatMap {
        case m: RecursivePublishModule => m.moduleDeps
        case m => Seq(m)
      }.collect {
        case m: PublishModule => m
      }
    )(module => module.publishLocal().t)()
    Result.Success(())
  }
}

// ------------------------ GROUPS ------------------------
object soundness extends ScalaModule {
  def scalaVersion = settings.scalaVersion
  def moduleDeps = Seq()

  object base extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(ambience.core, aviation.core, contextual.core,
        contingency.core, denominative.core, digression.core, diuretic.core, feudalism.core,
        fulminate.core, hieroglyph.core, adversaria.core, turbulence.core, eucalyptus.core,
        gossamer.core, inimitable.core, iridescence.core, kaleidoscope.core, mercator.core,
        nomenclature.core, parasite.core, rudiments.core, spectacular.core, symbolism.core,
        prepositional.core, vacuous.core, wisteria.core, vicarious.core, serpentine.core,
        typonym.core, zephyrine.core)
  }

  object cli extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(burdock.core, dendrology.tree, dendrology.dag, exoskeleton.completions,
        escritoire.core, ethereal.core, galilei.core, eucalyptus.ansi, eucalyptus.syslog,
        guillotine.core, escapade.core, imperial.core, profanity.core, surveillance.core,
        punctuation.ansi)
  }

  object data extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(caesura.core, cellulose.core, dissonance.core, enigmatic.core,
        gastronomy.core, chiaroscuro.core, merino.core, jacinta.core, monotonous.core,
        panopticon.core, camouflage.core, ulysses.core, polyvinyl.core, polaris.core,
        zeppelin.core, xylophone.core, anamnesis.core)
  }

  object sci extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(abacist.core, acyclicity.core, baroque.core, cardinality.core,
        charisma.core, geodesy.core, hypotenuse.core, metamorphose.core, mosquito.core,
        quantitative.core)
  }

  object test extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(capricious.core, larceny.plugin, sedentary.core, tarantula.core,
        superlunary.core, yossarian.core, probably.core, probably.cli, superlunary.jvm)
  }

  object tool extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(anthology.core, harlequin.core, hellenism.core, hyperbole.core,
        octogenarian.core, revolution.core, umbrageous.plugin, anthology.java)
  }

  object web extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(cataclysm.core, coaxial.core, cosmopolite.core, gesticulate.core,
        honeycomb.core, nettlesome.core, nettlesome.url, hallucination.core, phoenicia.core,
        punctuation.core, savagery.core, scintillate.server, scintillate.servlet,
        telekinesis.core, plutocrat.core, eucalyptus.gcp, punctuation.html, legerdemain.core)
  }

  object all extends BaseScalaModule with RecursivePublishModule {
    def moduleDeps = Seq(base, cli, data, sci, test, tool, web)
  }
}

// ------------------------ SAMPLES ------------------------

object sample extends ScalaModule {
  def scalaVersion = settings.scalaVersion
  def moduleDeps = Seq(soundness.all)

  object tube extends ScalaModule {
    def scalaVersion = settings.scalaVersion
    def scalacOptions = settings.scalaOptions
    def moduleDeps = Seq(soundness.all)
    def sources = Task.Sources {
      Seq(PathRef(millSourcePath / "src" / "core"))
    }
  }
}

// ------------------------ MODULES ------------------------

object abacist extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(quantitative.units)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object acyclicity extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object adversaria extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object ambience extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(guillotine.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object anamnesis extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core, contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object anthology extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hellenism.core)
  }

  object `scala` extends SoundnessSubModule {
    def moduleDeps = Seq(core, anticipation.log, ambience.core, galilei.core)
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object `java` extends SoundnessSubModule {
    def moduleDeps = Seq(galilei.core, ambience.core, core, anticipation.log)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, `scala`, `java`, core)
  }
}

object anticipation extends SoundnessModule {
  object generic extends SoundnessSubModule {
    def moduleDeps = Seq(prepositional.core)
  }

  object text extends SoundnessSubModule {
    def moduleDeps = Seq(symbolism.core)
  }

  object opaque extends SoundnessSubModule {
    def moduleDeps = Seq(text)
  }

  object css extends SoundnessSubModule {
    def moduleDeps = Seq(text, generic)
  }

  object url extends SoundnessSubModule {
    def moduleDeps = Seq(text, generic)
  }

  object html extends SoundnessSubModule {
    def moduleDeps = Seq(text, generic)
  }

  object print extends SoundnessSubModule {
    def moduleDeps = Seq(text)
  }

  object http extends SoundnessSubModule {
    def moduleDeps = Seq(text, codec, generic)
  }

  object codec extends SoundnessSubModule {
    def moduleDeps = Seq(text)
  }

  object transport extends SoundnessSubModule

  object color extends SoundnessSubModule

  object log extends SoundnessSubModule {
    def moduleDeps = Seq(text)
  }

  object path extends SoundnessSubModule {
    def moduleDeps = Seq(text, generic)
  }

  object time extends SoundnessSubModule {
    def moduleDeps = Seq(generic)
  }

  object test extends ProbablyTestModule
}

object austronesian extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(wisteria.core, distillate.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object aviation extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(quantitative.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object baroque extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, quantitative.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core, quantitative.units)
  }
}

object bitumen extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(polaris.core, serpentine.core, gossamer.core, turbulence.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object burdock extends SoundnessModule {
  object boot extends JavaModule {
    def sources = Task.Sources {
      Seq(PathRef(millSourcePath / ".." / ".." / "src" / "boot"))
    }
  }

  object core extends SoundnessSubModule {
    def moduleDeps = Seq(zeppelin.core, exoskeleton.core, revolution.core, telekinesis.core, gastronomy.core, hellenism.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object caesura extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(turbulence.core, escritoire.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object camouflage extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(parasite.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object capricious extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(wisteria.core, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object cardinality extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(fulminate.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object cataclysm extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, anticipation.css, anticipation.html, serpentine.core, anticipation.color, hypotenuse.core, quantitative.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object cellulose extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(eucalyptus.core, chiaroscuro.core, kaleidoscope.core, polyvinyl.core, anticipation.transport)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object charisma extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, hieroglyph.core, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object chiaroscuro extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(escapade.core, dendrology.tree, escritoire.core, dissonance.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object coaxial extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(galilei.core, nettlesome.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object contextual extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object contingency extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object cosmopolite extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object dendrology extends SoundnessModule {
  object tree extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object dag extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, acyclicity.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, tree, dag)
  }
}

object denominative extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.text)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object digression extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core, contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object dissonance extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core, contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object distillate extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(contingency.core, digression.core, inimitable.core, wisteria.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core, nettlesome.url)
  }
}

object diuretic extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.path, anticipation.url, anticipation.time)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object embarcadero extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(jacinta.core, telekinesis.core, eucalyptus.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object enigmatic extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gastronomy.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object escapade extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, turbulence.core, anticipation.url, iridescence.core, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object escritoire extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object ethereal extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(surveillance.core, eucalyptus.syslog, digression.core, hellenism.core, exoskeleton.core)
  }

  object example extends SoundnessSubModule {
    def moduleDeps = Seq(core, exoskeleton.completions)
    override def finalMainClass: Target[String] = "ethereal.run"
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object eucalyptus extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(turbulence.core, gossamer.core)
  }
  object syslog extends SoundnessSubModule {
    def moduleDeps = Seq(guillotine.core, core)
  }

  object gcp extends SoundnessSubModule {
    def moduleDeps = Seq(jacinta.core, core)
  }

  object ansi extends SoundnessSubModule {
    def moduleDeps = Seq(escapade.core, core, iridescence.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, ansi, core, syslog)
  }
}

object exoskeleton extends SoundnessModule {
  object args extends SoundnessSubModule {
    def moduleDeps = Seq(escapade.core, profanity.core, ambience.core)
  }

  object core extends SoundnessSubModule {
    def moduleDeps = Seq(args, galilei.core)
  }

  object completions extends SoundnessSubModule {
    def moduleDeps = Seq(core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, args, core, completions)
  }
}

object feudalism extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object fulminate extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(
      anticipation.css,
      anticipation.http,
      symbolism.core,
      anticipation.print,
      anticipation.http,
      anticipation.log,
      proscenium.core
    )

    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object galilei extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(serpentine.core, guillotine.core, nomenclature.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object gastronomy extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(monotonous.core, turbulence.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object geodesy extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object gesticulate extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, anticipation.html, turbulence.core, zephyrine.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object gossamer extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(mercator.core, hieroglyph.core, contextual.core, spectacular.core, kaleidoscope.core, hypotenuse.core, distillate.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object guillotine extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(contextual.core, anticipation.log, contingency.core, turbulence.core, gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object hallucination extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(escapade.core, gesticulate.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object harlequin extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anthology.scala, gossamer.core)
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object hellenism extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.url, ambience.core, galilei.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object honeycomb extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, anticipation.html, anticipation.css, anticipation.path, anticipation.url, gesticulate.core, xylophone.core, serpentine.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object hieroglyph extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(kaleidoscope.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object hyperbole extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(harlequin.core, escapade.core, escritoire.core, dendrology.tree, hieroglyph.core)
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object hypotenuse extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(cardinality.core, anticipation.opaque, contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object imperial extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.path, digression.core, ambience.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object inimitable extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core, contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object iridescence extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(contextual.core, anticipation.color, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object jacinta extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(merino.core, gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object kaleidoscope extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core, contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object larceny extends SoundnessModule {
  object plugin extends SoundnessSubModule {
    def moduleDeps = Seq()
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object test extends ProbablyTestModule {
    override def finalMainClass: Target[String] = "run"
  }
}

object legerdemain extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(honeycomb.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core, scintillate.server)
  }
}

object mercator extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(fulminate.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object merino extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(turbulence.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object metamorphose extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object monotonous extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object mosquito extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, quantitative.units, core)
  }
}

object nettlesome extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, hypotenuse.core)
  }
  object url extends SoundnessSubModule {
    def moduleDeps = Seq(escapade.core, serpentine.core, anticipation.html, core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core, url)
  }
}

object nomenclature extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object octogenarian extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(guillotine.core, galilei.core, ambience.core, gastronomy.core, nettlesome.core, enigmatic.core, anticipation.url)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object panopticon extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object parasite extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(digression.core, mercator.core, anticipation.time, feudalism.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object perihelion extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(telekinesis.core, scintillate.server, gastronomy.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object phoenicia extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hypotenuse.core, turbulence.core, quantitative.core, polaris.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object plutocrat extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.opaque, hypotenuse.core, gossamer.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object polaris extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hypotenuse.core, wisteria.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object polyvinyl extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object prepositional extends SoundnessModule {
  object core extends SoundnessSubModule

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object proscenium extends SoundnessModule {
  object core extends SoundnessSubModule

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object probably extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, chiaroscuro.core, ambience.core, turbulence.core, eucalyptus.core, coverage)
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object cli extends SoundnessSubModule {
    def moduleDeps = Seq(core, escritoire.core, larceny.plugin)
  }

  object coverage extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, dendrology.tree, digression.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(cli)
  }
}

object profanity extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(eucalyptus.core, diuretic.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object punctuation extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, turbulence.core)
    def ivyDeps = Agg(
      ivy"com.vladsch.flexmark:flexmark:0.42.12",
      ivy"com.vladsch.flexmark:flexmark-ext-tables:0.42.12",
      ivy"com.vladsch.flexmark:flexmark-util:0.42.12",
      ivy"com.vladsch.flexmark:flexmark-formatter:0.42.12"
    )
  }

  object html extends SoundnessSubModule {
    def moduleDeps = Seq(core, honeycomb.core)
  }

  object ansi extends SoundnessSubModule {
    def moduleDeps = Seq(core, honeycomb.core, escapade.core, harlequin.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core, html, ansi)
  }
}

object quantitative extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hypotenuse.core, gossamer.core, anticipation.opaque, anticipation.time)
  }
  object units extends SoundnessSubModule {
    def moduleDeps = Seq(core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core, units)
  }
}

object revolution extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(serpentine.core, turbulence.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object rudiments extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(
      anticipation.css,
      anticipation.http,
      symbolism.core,
      anticipation.text,
      anticipation.http,
      anticipation.path,
      anticipation.log,
      anticipation.codec,
      fulminate.core,
      vacuous.core,
      denominative.core,
      proscenium.core
    )
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object satirical extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, turbulence.core, zephyrine.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object savagery extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(cataclysm.core, xylophone.core, quantitative.core, iridescence.core, geodesy.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object scintillate extends SoundnessModule {
  object server extends SoundnessSubModule {
    def moduleDeps = Seq(telekinesis.core)
  }

  object servlet extends SoundnessSubModule {
    def moduleDeps = Seq(server)
    def ivyDeps = Agg(ivy"jakarta.servlet:jakarta.servlet-api:6.0.0")
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, server, servlet)
  }
}

object sedentary extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(probably.core, diuretic.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object serpentine extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gossamer.core, nomenclature.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object spectacular extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core, inimitable.core, contingency.core, wisteria.core, digression.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object superlunary extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.css, anticipation.http, symbolism.core, anticipation.text, anticipation.http, jacinta.core, inimitable.core, gastronomy.core, ambience.core, hellenism.core, anthology.scala)
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-staging_3:${scalaVersion()}")
  }

  object jvm extends SoundnessSubModule {
    def moduleDeps = Seq(core, eucalyptus.core)
    def ivyDeps = Agg(
      ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}",
      ivy"org.scala-lang:scala3-staging_3:${scalaVersion()}"
    )
  }

  object test extends SoundnessSubModule {
    def moduleDeps = Seq(probably.cli, jvm)
    override def finalMainClass: Target[String] = "superlunary.run"
  }
}

object surveillance extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(anticipation.path, eucalyptus.core, feudalism.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object symbolism extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(prepositional.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object tarantula extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(jacinta.core, telekinesis.core, guillotine.core, cataclysm.core, honeycomb.core, hallucination.core, diuretic.core, eucalyptus.core, gastronomy.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object telekinesis extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(monotonous.core, gesticulate.core, nettlesome.url, coaxial.core, legerdemain.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object turbulence extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hieroglyph.core, parasite.core, capricious.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object typonym extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(proscenium.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object ulysses extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(gastronomy.core, cardinality.core, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object umbrageous extends SoundnessModule {
  object plugin extends SoundnessSubModule {
    def moduleDeps = Seq()
    def compileIvyDeps = Agg(ivy"org.scala-lang:scala3-compiler_3:${scalaVersion()}")
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, plugin)
  }
}

object vacuous extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(fulminate.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object vexillology extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hypotenuse.core, distillate.core)
  }
  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object vicarious extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(rudiments.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object wisteria extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(contingency.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object xylophone extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(wisteria.core, gossamer.core, turbulence.core, anticipation.transport)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object yossarian extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(iridescence.core, contingency.core, kaleidoscope.core, gossamer.core, turbulence.core, denominative.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object zephyrine extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(hieroglyph.core, hypotenuse.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object zeppelin extends SoundnessModule {
  object core extends SoundnessSubModule {
    def moduleDeps = Seq(galilei.core)
  }

  object test extends ProbablyTestModule {
    def moduleDeps = Seq(probably.cli, core)
  }
}

object tests extends BaseScalaModule {
  def moduleDeps = Seq(abacist.test, acyclicity.test, adversaria.test, ambience.test,
    anamnesis.test, anthology.test, anticipation.test, austronesian.test, aviation.test,
    baroque.test, bitumen.test, burdock.test, caesura.test, camouflage.test, capricious.test,
    cardinality.test, cataclysm.test, cellulose.test, charisma.test, chiaroscuro.test, coaxial.test,
    contextual.test, contingency.test, cosmopolite.test, dendrology.test, denominative.test,
    digression.test, dissonance.test, distillate.test, diuretic.test, embarcadero.test,
    enigmatic.test, escapade.test, escritoire.test, ethereal.test, eucalyptus.test,
    exoskeleton.test, feudalism.test, fulminate.test, galilei.test, gastronomy.test, geodesy.test,
    gesticulate.test, gossamer.test, guillotine.test, hallucination.test, harlequin.test,
    hellenism.test, honeycomb.test, hieroglyph.test, hyperbole.test, hypotenuse.test, imperial.test,
    inimitable.test, iridescence.test, jacinta.test, kaleidoscope.test, larceny.test, mercator.test,
    merino.test, metamorphose.test, monotonous.test, mosquito.test, nettlesome.test,
    nomenclature.test, octogenarian.test, panopticon.test, parasite.test, perihelion.test,
    phoenicia.test, plutocrat.test, polaris.test, polyvinyl.test, prepositional.test,
    proscenium.test, probably.test, profanity.test, punctuation.test, quantitative.test,
    revolution.test, rudiments.test, satirical.test, savagery.test, scintillate.test,
    sedentary.test, serpentine.test, spectacular.test, superlunary.test, surveillance.test,
    symbolism.test, tarantula.test, telekinesis.test, turbulence.test, typonym.test, ulysses.test,
    umbrageous.test, vacuous.test, vexillology.test, vicarious.test, wisteria.test, xylophone.test,
    yossarian.test, zephyrine.test, zeppelin.test)
}
